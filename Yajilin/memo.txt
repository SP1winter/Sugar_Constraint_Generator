# 使い方

### 前提
- SATソルバー(Minisatなど)およびSugarが使える環境なのは仮定します。
導入は頑張ってググってください。僕はつらかったです。
- 制約の生成、解の除外、描画のコードはPython3で書いています。
なぜかnumpyを使ってるけど、いらない気がする...

### おおまかな流れ
問題入力
↓
generator.py をPythonで実行
↓
yajilin.csp をSugarで実行 → 解の存在判定！
↓
解があればresult.txtに実行結果を貼る
↓
(graphic.py をPythonで実行 → 描画！)
↓
uniqueness.py をSugarで実行
↓
yajilin.csp をSugarで実行 → 唯一解判定！

### 制約の生成 (generator.py)
適当なテキストファイルに問題を入力します。デフォルトでは "yajilin_sample1p.txt" になっています。
その他、サンプルが入っています。入力はそのファイルに沿ってください。
以下詳しい説明です：
- まず最初に盤面サイズを記入、高さ(行の本数)・幅(列の本数) の順です。
- 盤面をサンプルのようにいい感じに再現してください。
	- ヒントのない障害物だけのマスは "??" で表記してください。
	- ヒントは数字+指す向き(UDLR)で表記してください。 "2L" なら「左向き2」です。
	- その他のマスは "--" です。
ところで、この表記だと二桁以上が表せないことに、この説明を書きながら気づきました。どうしたもんか...
なお盤面下部は読み込まないのでメモに使えます。

入力を保存したら、Pythonで "generator.py" を実行してください。
そうすれば "compass.csp" という制約の書かれたファイルが生成されるはずです。
あとはこれをSugarで実行すればよいです。

### 唯一性のチェック/解の除外 (uniqueness.py)
唯一性の確認のため、解を除外する制約が追加したいときは、"uniqueness.py" を用いてください。
まずSugarの実行で解があった場合、出力のanswerの行をコピーして適当なファイルにそのまま貼ってください。
ただし "s SATISFIABLE" の行は捨ててください。
次にファイルに名前をつけます。デフォルトだと "result.txt" を読み込むようになっているのでそうするとよいでしょう。
そして、"uniqueness.py" の最初の方にある問題ファイル読み込みの場所を、今調べたい問題のものに書き換えます。
デフォルトで "yajilin_sample1p.txt" となっている場所です。
(盤面サイズを取得するための苦肉の策です...)
あとはPython で "uniqueness.py" を実行しましょう。
これで、見つかった解を除外する制約を "yajilin.csp" に追記します。
これをSugarで実行すれば、唯一解かどうかチェックできます。

### 描画 (graphic.py)
"result.txt" を貼った上で、テキストファイル上に描画ができます。
先ほど同様、"graphic.py" の最初の方にある問題ファイル読み込みの場所を、今調べたい問題のものに書き換えます。
デフォルトで "yajilin_sample1p.txt" となっている場所です。
あとはこれをPythonで実行してください。
"graphic.txt" に結果が描画されるはずです。
描画はそれっぽい感じにしてます。

### 自動化
これらのファイルを適当に組み合わせれば、ここまでの判定の自動化も可能です。便利！
実際、作者の環境では自動化してますが、環境に依りそうなのでここでは割愛します。
というより、もともと自動化して書いていたので、逆に分割しました。バグが不安...

### おわりに
何か不具合があったり、「ここの記述もっと簡単にできるよ」などの添削があれば、ぜひ作者にお教えください。
